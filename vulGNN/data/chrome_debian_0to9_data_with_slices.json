[{"file_path": "../data/chrome_debian/raw_code/0_0.c", "code": "int curl_mvsprintf ( char * buffer , const char * format , va_list ap_save ) {\n  int retcode ;\n  retcode = dprintf_formatf ( & buffer , storebuffer , format , ap_save ) ;\n  * buffer = 0 ;\n  return retcode ;\n  }", "tokenized": "int ID ( char * ID , const char * ID , ID ID ) { int ID ; ID = ID ( & ID , ID , ID , ID ) ; * ID = 0 ; return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/0_1.c", "code": "static int alloc_addbyter ( int output , FILE * data ) {\n  struct asprintf * infop = ( struct asprintf * ) data ;\n  unsigned char outc = ( unsigned char ) output ;\n  if ( ! infop -> buffer ) {\n  infop -> buffer = malloc ( 32 ) ;\n  if ( ! infop -> buffer ) {\n  infop -> fail = 1 ;\n  return - 1 ;\n  }\n  infop -> alloc = 32 ;\n  infop -> len = 0 ;\n  }\n  else if ( infop -> len + 1 >= infop -> alloc ) {\n  char * newptr ;\n  newptr = realloc ( infop -> buffer , infop -> alloc * 2 ) ;\n  if ( ! newptr ) {\n  infop -> fail = 1 ;\n  return - 1 ;\n  }\n  infop -> buffer = newptr ;\n  infop -> alloc *= 2 ;\n  }\n  infop -> buffer [ infop -> len ] = outc ;\n  infop -> len ++ ;\n  return outc ;\n  }", "tokenized": "static int ID ( int ID , ID * ID ) { struct ID * ID = ( struct ID * ) ID ; unsigned char ID = ( unsigned char ) ID ; if ( ! ID -> ID ) { ID -> ID = ID ( 3 2 ) ; if ( ! ID -> ID ) { ID -> ID = 1 ; return - 1 ; } ID -> ID = 3 2 ; ID -> ID = 0 ; } else if ( ID -> ID + 1 >= ID -> ID ) { char * ID ; ID = ID ( ID -> ID , ID -> ID * 2 ) ; if ( ! ID ) { ID -> ID = 1 ; return - 1 ; } ID -> ID = ID ; ID -> ID *= 2 ; } ID -> ID [ ID -> ID ] = ID ; ID -> ID ++ ; return ID ; }", "call_slices_vd": [[1, 2, 4, 5], [1, 2, 4, 13, 15]], "call_slices_sy": [[1, 2, 4, 5, 6, 7, 8, 10, 11, 23, 24, 25], [1, 2, 4, 13, 15, 16, 17, 18, 20, 21, 23, 24, 25]], "array_slices_vd": [[1, 2, 3, 4, 5, 6, 11, 13, 15, 16, 20, 21, 23]], "array_slices_sy": [[1, 2, 3, 4, 5, 6, 11, 13, 15, 16, 20, 21, 23]], "arith_slices_vd": [[1, 2, 4, 13], [1, 2, 4, 13, 15]], "arith_slices_sy": [[1, 2, 4, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25], [1, 2, 4, 13, 15, 16, 17, 18, 20, 21, 23, 24, 25]], "ptr_slices_vd": [[1, 2, 4], [1, 2, 4, 5], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 10], [1, 2, 4, 5, 6, 11], [1, 2, 4, 13], [1, 2, 4, 13, 15], [1, 2, 4, 13, 15, 16, 17], [1, 2, 4, 13, 15, 16, 20], [1, 2, 3, 4, 5, 6, 11, 13, 15, 16, 20, 21, 23], [1, 2, 4, 5, 6, 11, 13, 15, 16, 20, 21, 24]], "ptr_slices_sy": [[1, 2, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25], [1, 2, 4, 5, 6, 7, 8, 10, 11, 23, 24, 25], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 10], [1, 2, 4, 5, 6, 11, 23, 24], [1, 2, 4, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25], [1, 2, 4, 13, 15, 16, 17, 18, 20, 21, 23, 24, 25], [1, 2, 4, 13, 15, 16, 17], [1, 2, 4, 13, 15, 16, 20, 21, 23, 24], [1, 2, 3, 4, 5, 6, 11, 13, 15, 16, 20, 21, 23], [1, 2, 4, 5, 6, 11, 13, 15, 16, 20, 21, 24]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/1_0.c", "code": "char * curl_mvaprintf ( const char * format , va_list ap_save ) {\n  int retcode ;\n  struct asprintf info ;\n  info . buffer = NULL ;\n  info . len = 0 ;\n  info . alloc = 0 ;\n  info . fail = 0 ;\n  retcode = dprintf_formatf ( & info , alloc_addbyter , format , ap_save ) ;\n  if ( ( - 1 == retcode ) || info . fail ) {\n  if ( info . alloc ) free ( info . buffer ) ;\n  return NULL ;\n  }\n  if ( info . alloc ) {\n  info . buffer [ info . len ] = 0 ;\n  return info . buffer ;\n  }\n  else return strdup ( \"\" ) ;\n  }", "tokenized": "char * ID ( const char * ID , ID ID ) { int ID ; struct ID ID ; ID . ID = ID ; ID . ID = 0 ; ID . ID = 0 ; ID . ID = 0 ; ID = ID ( & ID , ID , ID , ID ) ; if ( ( - 1 == ID ) || ID . ID ) { if ( ID . ID ) ID ( ID . ID ) ; return ID ; } if ( ID . ID ) { ID . ID [ ID . ID ] = 0 ; return ID . ID ; } else return ID ( STRING ) ; }", "call_slices_vd": [[1, 3, 4, 5, 6, 7, 8, 9, 13, 17], [1, 3, 4, 5, 6, 7, 8, 9, 10]], "call_slices_sy": [[1, 3, 4, 5, 6, 7, 8, 9, 13, 17], [1, 3, 4, 5, 6, 7, 8, 9, 10]], "array_slices_vd": [[1, 3, 4, 5, 6, 7, 8, 9, 13, 14]], "array_slices_sy": [[1, 3, 4, 5, 6, 7, 8, 9, 13, 14]], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/1_1.c", "code": "static int jbig2_word_stream_buf_get_next_word ( Jbig2WordStream * self , int offset , uint32_t * word ) {\n  Jbig2WordStreamBuf * z = ( Jbig2WordStreamBuf * ) self ;\n  const byte * data = z -> data ;\n  uint32_t result ;\n  if ( offset + 4 < z -> size ) result = ( data [ offset ] << 24 ) | ( data [ offset + 1 ] << 16 ) | ( data [ offset + 2 ] << 8 ) | data [ offset + 3 ] ;\n  else if ( offset > z -> size ) return - 1 ;\n  else {\n  int i ;\n  result = 0 ;\n  for ( i = 0 ;\n  i < z -> size - offset ;\n  i ++ ) result |= data [ offset + i ] << ( ( 3 - i ) << 3 ) ;\n  }\n  * word = result ;\n  return 0 ;\n  }", "tokenized": "static int ID ( ID * ID , int ID , ID * ID ) { ID * ID = ( ID * ) ID ; const ID * ID = ID -> ID ; ID ID ; if ( ID + 4 < ID -> ID ) ID = ( ID [ ID ] << 2 4 ) | ( ID [ ID + 1 ] << 1 6 ) | ( ID [ ID + 2 ] << 8 ) | ID [ ID + 3 ] ; else if ( ID > ID -> ID ) return - 1 ; else { int ID ; ID = 0 ; for ( ID = 0 ; ID < ID -> ID - ID ; ID ++ ) ID |= ID [ ID + ID ] << ( ( 3 - ID ) << 3 ) ; } * ID = ID ; return 0 ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [[1, 2, 3, 5, 6, 9, 10, 11, 12], [1, 2, 3, 5]], "array_slices_sy": [[1, 2, 3, 5, 6, 9, 10, 11, 12, 14], [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15]], "arith_slices_vd": [[1, 2, 3, 5, 6, 9, 10, 11, 12], [1, 2, 3, 5]], "arith_slices_sy": [[1, 2, 3, 5, 6, 9, 10, 11, 12, 14], [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15]], "ptr_slices_vd": [[1, 2, 3, 5, 6, 9, 10, 11, 12], [1, 2, 3]], "ptr_slices_sy": [[1, 2, 3, 5, 6, 9, 10, 11, 12, 14], [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/2_0.c", "code": "int curl_mprintf ( const char * format , ... ) {\n  int retcode ;\n  va_list ap_save ;\n  va_start ( ap_save , format ) ;\n  retcode = dprintf_formatf ( stdout , fputc , format , ap_save ) ;\n  va_end ( ap_save ) ;\n  return retcode ;\n  }", "tokenized": "int ID ( const char * ID , ... ) { int ID ; ID ID ; ID ( ID , ID ) ; ID = ID ( ID , ID , ID , ID ) ; ID ( ID ) ; return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/2_1.c", "code": "int jbig2_text_region ( Jbig2Ctx * ctx , Jbig2Segment * segment , const byte * segment_data ) {\n  int offset = 0 ;\n  Jbig2RegionSegmentInfo region_info ;\n  Jbig2TextRegionParams params ;\n  Jbig2Image * image = NULL ;\n  Jbig2SymbolDict * * dicts = NULL ;\n  int n_dicts = 0 ;\n  uint16_t flags = 0 ;\n  uint16_t huffman_flags = 0 ;\n  Jbig2ArithCx * GR_stats = NULL ;\n  int code = 0 ;\n  Jbig2WordStream * ws = NULL ;\n  Jbig2ArithState * as = NULL ;\n  int table_index = 0 ;\n  const Jbig2HuffmanParams * huffman_params = NULL ;\n  if ( segment -> data_length < 17 ) goto too_short ;\n  jbig2_get_region_segment_info ( & region_info , segment_data ) ;\n  offset += 17 ;\n  flags = jbig2_get_uint16 ( segment_data + offset ) ;\n  offset += 2 ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"text region header flags 0x%04x\" , flags ) ;\n  memset ( & params , 0 , sizeof ( Jbig2TextRegionParams ) ) ;\n  params . SBHUFF = flags & 0x0001 ;\n  params . SBREFINE = flags & 0x0002 ;\n  params . LOGSBSTRIPS = ( flags & 0x000c ) >> 2 ;\n  params . SBSTRIPS = 1 << params . LOGSBSTRIPS ;\n  params . REFCORNER = ( Jbig2RefCorner ) ( ( flags & 0x0030 ) >> 4 ) ;\n  params . TRANSPOSED = flags & 0x0040 ;\n  params . SBCOMBOP = ( Jbig2ComposeOp ) ( ( flags & 0x0180 ) >> 7 ) ;\n  params . SBDEFPIXEL = flags & 0x0200 ;\n  params . SBDSOFFSET = ( flags & 0x7C00 ) >> 10 ;\n  if ( params . SBDSOFFSET > 0x0f ) params . SBDSOFFSET -= 0x20 ;\n  params . SBRTEMPLATE = flags & 0x8000 ;\n  if ( params . SBDSOFFSET ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"text region has SBDSOFFSET %d\" , params . SBDSOFFSET ) ;\n  }\n  if ( params . SBHUFF ) {\n  huffman_flags = jbig2_get_uint16 ( segment_data + offset ) ;\n  offset += 2 ;\n  if ( huffman_flags & 0x8000 ) jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"reserved bit 15 of text region huffman flags is not zero\" ) ;\n  }\n  else {\n  if ( ( params . SBREFINE ) && ! ( params . SBRTEMPLATE ) ) {\n  params . sbrat [ 0 ] = segment_data [ offset ] ;\n  params . sbrat [ 1 ] = segment_data [ offset + 1 ] ;\n  params . sbrat [ 2 ] = segment_data [ offset + 2 ] ;\n  params . sbrat [ 3 ] = segment_data [ offset + 3 ] ;\n  offset += 4 ;\n  }\n  }\n  params . SBNUMINSTANCES = jbig2_get_uint32 ( segment_data + offset ) ;\n  offset += 4 ;\n  if ( params . SBHUFF ) {\n  switch ( huffman_flags & 0x0003 ) {\n  case 0 : params . SBHUFFFS = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_F ) ;\n  break ;\n  case 1 : params . SBHUFFFS = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_G ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom FS huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFFS = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  case 2 : default : code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region specified invalid FS huffman table\" ) ;\n  goto cleanup1 ;\n  break ;\n  }\n  if ( params . SBHUFFFS == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified FS huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x000c ) >> 2 ) {\n  case 0 : params . SBHUFFDS = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_H ) ;\n  break ;\n  case 1 : params . SBHUFFDS = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_I ) ;\n  break ;\n  case 2 : params . SBHUFFDS = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_J ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom DS huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFDS = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  }\n  if ( params . SBHUFFDS == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified DS huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x0030 ) >> 4 ) {\n  case 0 : params . SBHUFFDT = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_K ) ;\n  break ;\n  case 1 : params . SBHUFFDT = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_L ) ;\n  break ;\n  case 2 : params . SBHUFFDT = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_M ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom DT huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFDT = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  }\n  if ( params . SBHUFFDT == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified DT huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x00c0 ) >> 6 ) {\n  case 0 : params . SBHUFFRDW = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_N ) ;\n  break ;\n  case 1 : params . SBHUFFRDW = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_O ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom RDW huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFRDW = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  case 2 : default : code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region specified invalid RDW huffman table\" ) ;\n  goto cleanup1 ;\n  break ;\n  }\n  if ( params . SBHUFFRDW == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified RDW huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x0300 ) >> 8 ) {\n  case 0 : params . SBHUFFRDH = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_N ) ;\n  break ;\n  case 1 : params . SBHUFFRDH = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_O ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom RDH huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFRDH = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  case 2 : default : code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region specified invalid RDH huffman table\" ) ;\n  goto cleanup1 ;\n  break ;\n  }\n  if ( params . SBHUFFRDH == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified RDH huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x0c00 ) >> 10 ) {\n  case 0 : params . SBHUFFRDX = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_N ) ;\n  break ;\n  case 1 : params . SBHUFFRDX = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_O ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom RDX huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFRDX = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  case 2 : default : code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region specified invalid RDX huffman table\" ) ;\n  goto cleanup1 ;\n  break ;\n  }\n  if ( params . SBHUFFRDX == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified RDX huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x3000 ) >> 12 ) {\n  case 0 : params . SBHUFFRDY = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_N ) ;\n  break ;\n  case 1 : params . SBHUFFRDY = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_O ) ;\n  break ;\n  case 3 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom RDY huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFRDY = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  case 2 : default : code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region specified invalid RDY huffman table\" ) ;\n  goto cleanup1 ;\n  break ;\n  }\n  if ( params . SBHUFFRDY == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified RDY huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  switch ( ( huffman_flags & 0x4000 ) >> 14 ) {\n  case 0 : params . SBHUFFRSIZE = jbig2_build_huffman_table ( ctx , & jbig2_huffman_params_A ) ;\n  break ;\n  case 1 : huffman_params = jbig2_find_table ( ctx , segment , table_index ) ;\n  if ( huffman_params == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Custom RSIZE huffman table not found (%d)\" , table_index ) ;\n  goto cleanup1 ;\n  }\n  params . SBHUFFRSIZE = jbig2_build_huffman_table ( ctx , huffman_params ) ;\n  ++ table_index ;\n  break ;\n  }\n  if ( params . SBHUFFRSIZE == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate text region specified RSIZE huffman table\" ) ;\n  goto cleanup1 ;\n  }\n  if ( huffman_flags & 0x8000 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"text region huffman flags bit 15 is set, contrary to spec\" ) ;\n  }\n  }\n  jbig2_error ( ctx , JBIG2_SEVERITY_INFO , segment -> number , \"text region: %d x %d @ (%d,%d) %d symbols\" , region_info . width , region_info . height , region_info . x , region_info . y , params . SBNUMINSTANCES ) ;\n  n_dicts = jbig2_sd_count_referred ( ctx , segment ) ;\n  if ( n_dicts != 0 ) {\n  dicts = jbig2_sd_list_referred ( ctx , segment ) ;\n  }\n  else {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"text region refers to no symbol dictionaries!\" ) ;\n  goto cleanup1 ;\n  }\n  if ( dicts == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"unable to retrive symbol dictionaries! previous parsing error?\" ) ;\n  goto cleanup1 ;\n  }\n  else {\n  int index ;\n  if ( dicts [ 0 ] == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"unable to find first referenced symbol dictionary!\" ) ;\n  goto cleanup1 ;\n  }\n  for ( index = 1 ;\n  index < n_dicts ;\n  index ++ ) if ( dicts [ index ] == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"unable to find all referenced symbol dictionaries!\" ) ;\n  n_dicts = index ;\n  }\n  }\n  {\n  int stats_size = params . SBRTEMPLATE ? 1 << 10 : 1 << 13 ;\n  GR_stats = jbig2_new ( ctx , Jbig2ArithCx , stats_size ) ;\n  if ( GR_stats == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"could not allocate GR_stats\" ) ;\n  goto cleanup1 ;\n  }\n  memset ( GR_stats , 0 , stats_size ) ;\n  }\n  image = jbig2_image_new ( ctx , region_info . width , region_info . height ) ;\n  if ( image == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate text region image\" ) ;\n  goto cleanup2 ;\n  }\n  ws = jbig2_word_stream_buf_new ( ctx , segment_data + offset , segment -> data_length - offset ) ;\n  if ( ws == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate ws in text region image\" ) ;\n  goto cleanup2 ;\n  }\n  as = jbig2_arith_new ( ctx , ws ) ;\n  if ( as == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate as in text region image\" ) ;\n  goto cleanup2 ;\n  }\n  if ( ! params . SBHUFF ) {\n  int SBSYMCODELEN , index ;\n  int SBNUMSYMS = 0 ;\n  for ( index = 0 ;\n  index < n_dicts ;\n  index ++ ) {\n  SBNUMSYMS += dicts [ index ] -> n_symbols ;\n  }\n  params . IADT = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IAFS = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IADS = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IAIT = jbig2_arith_int_ctx_new ( ctx ) ;\n  if ( ( params . IADT == NULL ) || ( params . IAFS == NULL ) || ( params . IADS == NULL ) || ( params . IAIT == NULL ) ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate text region image data\" ) ;\n  goto cleanup3 ;\n  }\n  for ( SBSYMCODELEN = 0 ;\n  ( 1 << SBSYMCODELEN ) < SBNUMSYMS ;\n  SBSYMCODELEN ++ ) {\n  }\n  params . IAID = jbig2_arith_iaid_ctx_new ( ctx , SBSYMCODELEN ) ;\n  params . IARI = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IARDW = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IARDH = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IARDX = jbig2_arith_int_ctx_new ( ctx ) ;\n  params . IARDY = jbig2_arith_int_ctx_new ( ctx ) ;\n  if ( ( params . IAID == NULL ) || ( params . IARI == NULL ) || ( params . IARDW == NULL ) || ( params . IARDH == NULL ) || ( params . IARDX == NULL ) || ( params . IARDY == NULL ) ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate text region image data\" ) ;\n  goto cleanup4 ;\n  }\n  }\n  code = jbig2_decode_text_region ( ctx , segment , & params , ( const Jbig2SymbolDict * const * ) dicts , n_dicts , image , segment_data + offset , segment -> data_length - offset , GR_stats , as , ws ) ;\n  if ( code < 0 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to decode text region image data\" ) ;\n  goto cleanup4 ;\n  }\n  if ( ( segment -> flags & 63 ) == 4 ) {\n  segment -> result = jbig2_image_clone ( ctx , image ) ;\n  }\n  else {\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"composing %dx%d decoded text region onto page at (%d, %d)\" , region_info . width , region_info . height , region_info . x , region_info . y ) ;\n  jbig2_page_add_result ( ctx , & ctx -> pages [ ctx -> current_page ] , image , region_info . x , region_info . y , region_info . op ) ;\n  }\n  cleanup4 : if ( ! params . SBHUFF ) {\n  jbig2_arith_iaid_ctx_free ( ctx , params . IAID ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IARI ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IARDW ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IARDH ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IARDX ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IARDY ) ;\n  }\n  cleanup3 : if ( ! params . SBHUFF ) {\n  jbig2_arith_int_ctx_free ( ctx , params . IADT ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IAFS ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IADS ) ;\n  jbig2_arith_int_ctx_free ( ctx , params . IAIT ) ;\n  }\n  jbig2_free ( ctx -> allocator , as ) ;\n  jbig2_word_stream_buf_free ( ctx , ws ) ;\n  cleanup2 : jbig2_free ( ctx -> allocator , GR_stats ) ;\n  jbig2_image_release ( ctx , image ) ;\n  cleanup1 : if ( params . SBHUFF ) {\n  jbig2_release_huffman_table ( ctx , params . SBHUFFFS ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFDS ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFDT ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFRDX ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFRDY ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFRDW ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFRDH ) ;\n  jbig2_release_huffman_table ( ctx , params . SBHUFFRSIZE ) ;\n  }\n  jbig2_free ( ctx -> allocator , dicts ) ;\n  return code ;\n  too_short : return jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Segment too short\" ) ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , const ID * ID ) { int ID = 0 ; ID ID ; ID ID ; ID * ID = ID ; ID * * ID = ID ; int ID = 0 ; ID ID = 0 ; ID ID = 0 ; ID * ID = ID ; int ID = 0 ; ID * ID = ID ; ID * ID = ID ; int ID = 0 ; const ID * ID = ID ; if ( ID -> ID < 1 7 ) goto ID ; ID ( & ID , ID ) ; ID += 1 7 ; ID = ID ( ID + ID ) ; ID += 2 ; ID ( ID , ID , ID -> ID , LITERAL , ID ) ; ID ( & ID , 0 , sizeof ( ID ) ) ; ID . ID = ID & 0 x 0 0 0 1 ; ID . ID = ID & 0 x 0 0 0 2 ; ID . ID = ( ID & 0 x 0 0 0 c ) >> 2 ; ID . ID = 1 << ID . ID ; ID . ID = ( ID ) ( ( ID & 0 x 0 0 3 0 ) >> 4 ) ; ID . ID = ID & 0 x 0 0 4 0 ; ID . ID = ( ID ) ( ( ID & 0 x 0 1 8 0 ) >> 7 ) ; ID . ID = ID & 0 x 0 2 0 0 ; ID . ID = ( ID & 0 x 7 C 0 0 ) >> 1 0 ; if ( ID . ID > 0 x 0 f ) ID . ID -= 0 x 2 0 ; ID . ID = ID & 0 x 8 0 0 0 ; if ( ID . ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID . ID ) ; } if ( ID . ID ) { ID = ID ( ID + ID ) ; ID += 2 ; if ( ID & 0 x 8 0 0 0 ) ID ( ID , ID , ID -> ID , LITERAL ) ; } else { if ( ( ID . ID ) && ! ( ID . ID ) ) { ID . ID [ 0 ] = ID [ ID ] ; ID . ID [ 1 ] = ID [ ID + 1 ] ; ID . ID [ 2 ] = ID [ ID + 2 ] ; ID . ID [ 3 ] = ID [ ID + 3 ] ; ID += 4 ; } } ID . ID = ID ( ID + ID ) ; ID += 4 ; if ( ID . ID ) { switch ( ID & 0 x 0 0 0 3 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; case 2 : default : ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 0 0 0 c ) >> 2 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 2 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 0 0 3 0 ) >> 4 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 2 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 0 0 c 0 ) >> 6 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; case 2 : default : ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 0 3 0 0 ) >> 8 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; case 2 : default : ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 0 c 0 0 ) >> 1 0 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; case 2 : default : ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 3 0 0 0 ) >> 1 2 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID . ID = ID ( ID , & ID ) ; break ; case 3 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; case 2 : default : ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } switch ( ( ID & 0 x 4 0 0 0 ) >> 1 4 ) { case 0 : ID . ID = ID ( ID , & ID ) ; break ; case 1 : ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } ID . ID = ID ( ID , ID ) ; ++ ID ; break ; } if ( ID . ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } if ( ID & 0 x 8 0 0 0 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; } } ID ( ID , ID , ID -> ID , LITERAL , ID . ID , ID . ID , ID . ID , ID . ID , ID . ID ) ; ID = ID ( ID , ID ) ; if ( ID != 0 ) { ID = ID ( ID , ID ) ; } else { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } else { int ID ; if ( ID [ 0 ] == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } for ( ID = 1 ; ID < ID ; ID ++ ) if ( ID [ ID ] == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID = ID ; } } { int ID = ID . ID ? 1 << 1 0 : 1 << 1 3 ; ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID ( ID , 0 , ID ) ; } ID = ID ( ID , ID . ID , ID . ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID + ID , ID -> ID - ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } if ( ! ID . ID ) { int ID , ID ; int ID = 0 ; for ( ID = 0 ; ID < ID ; ID ++ ) { ID += ID [ ID ] -> ID ; } ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; if ( ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } for ( ID = 0 ; ( 1 << ID ) < ID ; ID ++ ) { } ID . ID = ID ( ID , ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; ID . ID = ID ( ID ) ; if ( ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) || ( ID . ID == ID ) ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } } ID = ID ( ID , ID , & ID , ( const ID * const * ) ID , ID , ID , ID + ID , ID -> ID - ID , ID , ID , ID ) ; if ( ID < 0 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } if ( ( ID -> ID & 6 3 ) == 4 ) { ID -> ID = ID ( ID , ID ) ; } else { ID ( ID , ID , ID -> ID , LITERAL , ID . ID , ID . ID , ID . ID , ID . ID ) ; ID ( ID , & ID -> ID [ ID -> ID ] , ID , ID . ID , ID . ID , ID . ID ) ; } ID : if ( ! ID . ID ) { ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; } ID : if ( ! ID . ID ) { ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; } ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; ID : ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; ID : if ( ID . ID ) { ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; ID ( ID , ID . ID ) ; } ID ( ID -> ID , ID ) ; return ID ; ID : return ID ( ID , ID , ID -> ID , LITERAL ) ; }", "call_slices_vd": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 252], [1, 16, 22]], "call_slices_sy": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 252], [1, 16, 22]], "array_slices_vd": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 44], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 45], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 46], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 47], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 310]], "array_slices_sy": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 235, 236, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 44], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 45], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 46], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 47], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 241, 242, 273, 274, 275, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 310]], "arith_slices_vd": [[1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 45], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 46], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 47], [1, 2, 16, 18, 19], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 43, 48, 51]], "arith_slices_sy": [[1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 40, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 222, 225, 226, 228, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 45], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 46], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 43, 47], [1, 2, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 222, 225, 226, 228, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 43, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 222, 225, 226, 228, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341]], "ptr_slices_vd": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 128], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 256], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 133], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 261], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 266], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 141, 142, 143], [1, 16], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275], [1, 2, 16, 18, 19, 21], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 149], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 154], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 277, 278, 279, 280, 281, 282], [1, 2, 4, 16, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 162, 163, 164], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 40], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 170], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 302], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 175], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 306], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 309], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 310], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 183, 184, 185], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 59, 60, 61], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 191], [1, 2, 4, 9, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 67], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 196], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 326], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 72], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 328], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 202, 203, 204], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 82, 83, 84], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 212], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 340], [1, 16, 342], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 215, 216], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 219], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 92], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 225], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 229], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 102, 103, 104], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 235], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 112], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 241, 242], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 249], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 120, 121, 122]], "ptr_slices_sy": [[1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 128, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 256, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 133, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 261, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 266, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 141, 142, 143, 341], [1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 222, 225, 226, 228, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341], [1, 2, 16, 18, 19, 21], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 149, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 154, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 277, 278, 279, 280, 281, 282, 341], [1, 2, 4, 16, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 162, 163, 164, 341], [1, 2, 4, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 40], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 170, 341], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 302], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 175, 341], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 306, 309, 310], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 306], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 309], [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 242, 246, 247, 248, 254, 255, 259, 260, 264, 265, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 301, 305, 310], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 183, 184, 185, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 59, 60, 61, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 191, 341], [1, 2, 4, 9, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 67, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 196, 341], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 52, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 254, 255, 259, 260, 264, 265, 326], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 72, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 328], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 202, 203, 204, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 82, 83, 84, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 212, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 340], [1, 16, 342], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 215, 216], [1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 219], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 92, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 225, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 229, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 102, 103, 104, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 235, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 112, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 238, 239, 240, 241, 242], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 116, 118, 120, 121, 125, 132, 136, 137, 139, 141, 142, 146, 153, 157, 158, 160, 162, 163, 167, 174, 178, 179, 181, 183, 184, 188, 195, 199, 200, 202, 203, 207, 211, 220, 221, 222, 228, 234, 246, 247, 248, 249, 341], [1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 48, 51, 53, 54, 55, 57, 59, 60, 64, 71, 75, 76, 78, 80, 82, 83, 87, 91, 95, 96, 98, 100, 102, 103, 107, 111, 115, 120, 121, 122, 341]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/3_0.c", "code": "static __inline __uint16_t __uint16_identity ( __uint16_t __x ) {\n  return __x ;\n  }", "tokenized": "static __inline ID ID ( ID ID ) { return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/3_1.c", "code": "int jbig2_decode_text_region ( Jbig2Ctx * ctx , Jbig2Segment * segment , const Jbig2TextRegionParams * params , const Jbig2SymbolDict * const * dicts , const int n_dicts , Jbig2Image * image , const byte * data , const size_t size , Jbig2ArithCx * GR_stats , Jbig2ArithState * as , Jbig2WordStream * ws ) {\n  uint32_t NINSTANCES ;\n  uint32_t ID ;\n  int32_t STRIPT ;\n  int32_t FIRSTS ;\n  int32_t DT ;\n  int32_t DFS ;\n  int32_t IDS ;\n  int32_t CURS ;\n  int32_t CURT ;\n  int S , T ;\n  int x , y ;\n  bool first_symbol ;\n  uint32_t index , SBNUMSYMS ;\n  Jbig2Image * IB = NULL ;\n  Jbig2HuffmanState * hs = NULL ;\n  Jbig2HuffmanTable * SBSYMCODES = NULL ;\n  int code = 0 ;\n  int RI ;\n  SBNUMSYMS = 0 ;\n  for ( index = 0 ;\n  index < n_dicts ;\n  index ++ ) {\n  SBNUMSYMS += dicts [ index ] -> n_symbols ;\n  }\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"symbol list contains %d glyphs in %d dictionaries\" , SBNUMSYMS , n_dicts ) ;\n  if ( params -> SBHUFF ) {\n  Jbig2HuffmanTable * runcodes = NULL ;\n  Jbig2HuffmanParams runcodeparams ;\n  Jbig2HuffmanLine runcodelengths [ 35 ] ;\n  Jbig2HuffmanLine * symcodelengths = NULL ;\n  Jbig2HuffmanParams symcodeparams ;\n  int err , len , range , r ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"huffman coded text region\" ) ;\n  hs = jbig2_huffman_new ( ctx , ws ) ;\n  if ( hs == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"failed to allocate storage for text region\" ) ;\n  return - 1 ;\n  }\n  for ( index = 0 ;\n  index < 35 ;\n  index ++ ) {\n  runcodelengths [ index ] . PREFLEN = jbig2_huffman_get_bits ( hs , 4 , & code ) ;\n  if ( code < 0 ) goto cleanup1 ;\n  runcodelengths [ index ] . RANGELEN = 0 ;\n  runcodelengths [ index ] . RANGELOW = index ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \" read runcode%d length %d\" , index , runcodelengths [ index ] . PREFLEN ) ;\n  }\n  runcodeparams . HTOOB = 0 ;\n  runcodeparams . lines = runcodelengths ;\n  runcodeparams . n_lines = 35 ;\n  runcodes = jbig2_build_huffman_table ( ctx , & runcodeparams ) ;\n  if ( runcodes == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error constructing symbol id runcode table!\" ) ;\n  code = - 1 ;\n  goto cleanup1 ;\n  }\n  symcodelengths = jbig2_new ( ctx , Jbig2HuffmanLine , SBNUMSYMS ) ;\n  if ( symcodelengths == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"memory allocation failure reading symbol ID huffman table!\" ) ;\n  code = - 1 ;\n  goto cleanup1 ;\n  }\n  index = 0 ;\n  while ( index < SBNUMSYMS ) {\n  code = jbig2_huffman_get ( hs , runcodes , & err ) ;\n  if ( err != 0 || code < 0 || code >= 35 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error reading symbol ID huffman table!\" ) ;\n  code = err ? err : - 1 ;\n  goto cleanup1 ;\n  }\n  if ( code < 32 ) {\n  len = code ;\n  range = 1 ;\n  }\n  else {\n  if ( code == 32 ) {\n  if ( index < 1 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error decoding symbol id table: run length with no antecedent!\" ) ;\n  code = - 1 ;\n  goto cleanup1 ;\n  }\n  len = symcodelengths [ index - 1 ] . PREFLEN ;\n  }\n  else {\n  len = 0 ;\n  }\n  err = 0 ;\n  if ( code == 32 ) range = jbig2_huffman_get_bits ( hs , 2 , & err ) + 3 ;\n  else if ( code == 33 ) range = jbig2_huffman_get_bits ( hs , 3 , & err ) + 3 ;\n  else if ( code == 34 ) range = jbig2_huffman_get_bits ( hs , 7 , & err ) + 11 ;\n  if ( err < 0 ) goto cleanup1 ;\n  }\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \" read runcode%d at index %d (length %d range %d)\" , code , index , len , range ) ;\n  if ( index + range > SBNUMSYMS ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"runlength extends %d entries beyond the end of symbol id table!\" , index + range - SBNUMSYMS ) ;\n  range = SBNUMSYMS - index ;\n  }\n  for ( r = 0 ;\n  r < range ;\n  r ++ ) {\n  symcodelengths [ index + r ] . PREFLEN = len ;\n  symcodelengths [ index + r ] . RANGELEN = 0 ;\n  symcodelengths [ index + r ] . RANGELOW = index + r ;\n  }\n  index += r ;\n  }\n  if ( index < SBNUMSYMS ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"runlength codes do not cover the available symbol set\" ) ;\n  }\n  symcodeparams . HTOOB = 0 ;\n  symcodeparams . lines = symcodelengths ;\n  symcodeparams . n_lines = SBNUMSYMS ;\n  jbig2_huffman_skip ( hs ) ;\n  SBSYMCODES = jbig2_build_huffman_table ( ctx , & symcodeparams ) ;\n  cleanup1 : jbig2_free ( ctx -> allocator , symcodelengths ) ;\n  jbig2_release_huffman_table ( ctx , runcodes ) ;\n  if ( SBSYMCODES == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"could not construct Symbol ID huffman table!\" ) ;\n  jbig2_huffman_free ( ctx , hs ) ;\n  return ( ( code != 0 ) ? code : - 1 ) ;\n  }\n  }\n  jbig2_image_clear ( ctx , image , params -> SBDEFPIXEL ) ;\n  if ( params -> SBHUFF ) {\n  STRIPT = jbig2_huffman_get ( hs , params -> SBHUFFDT , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IADT , as , & STRIPT ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  STRIPT *= - ( params -> SBSTRIPS ) ;\n  FIRSTS = 0 ;\n  NINSTANCES = 0 ;\n  while ( NINSTANCES < params -> SBNUMINSTANCES ) {\n  if ( params -> SBHUFF ) {\n  DT = jbig2_huffman_get ( hs , params -> SBHUFFDT , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IADT , as , & DT ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  DT *= params -> SBSTRIPS ;\n  STRIPT += DT ;\n  first_symbol = TRUE ;\n  for ( ;\n  ;\n  ) {\n  if ( first_symbol ) {\n  if ( params -> SBHUFF ) {\n  DFS = jbig2_huffman_get ( hs , params -> SBHUFFFS , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IAFS , as , & DFS ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  FIRSTS += DFS ;\n  CURS = FIRSTS ;\n  first_symbol = FALSE ;\n  }\n  else {\n  if ( NINSTANCES > params -> SBNUMINSTANCES ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"too many NINSTANCES (%d) decoded\" , NINSTANCES ) ;\n  break ;\n  }\n  if ( params -> SBHUFF ) {\n  IDS = jbig2_huffman_get ( hs , params -> SBHUFFDS , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IADS , as , & IDS ) ;\n  }\n  if ( code ) {\n  break ;\n  }\n  CURS += IDS + params -> SBDSOFFSET ;\n  }\n  if ( params -> SBSTRIPS == 1 ) {\n  CURT = 0 ;\n  }\n  else if ( params -> SBHUFF ) {\n  CURT = jbig2_huffman_get_bits ( hs , params -> LOGSBSTRIPS , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IAIT , as , & CURT ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  T = STRIPT + CURT ;\n  if ( params -> SBHUFF ) {\n  ID = jbig2_huffman_get ( hs , SBSYMCODES , & code ) ;\n  }\n  else {\n  code = jbig2_arith_iaid_decode ( params -> IAID , as , ( int * ) & ID ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  if ( ID >= SBNUMSYMS ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"symbol id out of range! (%d/%d)\" , ID , SBNUMSYMS ) ;\n  goto cleanup2 ;\n  }\n  {\n  uint32_t id = ID ;\n  index = 0 ;\n  while ( id >= dicts [ index ] -> n_symbols ) id -= dicts [ index ++ ] -> n_symbols ;\n  IB = jbig2_image_clone ( ctx , dicts [ index ] -> glyphs [ id ] ) ;\n  if ( ! IB ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"missing glyph %d/%d!\" , index , id ) ;\n  goto cleanup2 ;\n  }\n  }\n  if ( params -> SBREFINE ) {\n  if ( params -> SBHUFF ) {\n  RI = jbig2_huffman_get_bits ( hs , 1 , & code ) ;\n  }\n  else {\n  code = jbig2_arith_int_decode ( params -> IARI , as , & RI ) ;\n  }\n  if ( code < 0 ) goto cleanup2 ;\n  }\n  else {\n  RI = 0 ;\n  }\n  if ( RI ) {\n  Jbig2RefinementRegionParams rparams ;\n  Jbig2Image * IBO ;\n  int32_t RDW , RDH , RDX , RDY ;\n  Jbig2Image * refimage ;\n  int BMSIZE = 0 ;\n  int code1 = 0 ;\n  int code2 = 0 ;\n  int code3 = 0 ;\n  int code4 = 0 ;\n  int code5 = 0 ;\n  if ( ! params -> SBHUFF ) {\n  code1 = jbig2_arith_int_decode ( params -> IARDW , as , & RDW ) ;\n  code2 = jbig2_arith_int_decode ( params -> IARDH , as , & RDH ) ;\n  code3 = jbig2_arith_int_decode ( params -> IARDX , as , & RDX ) ;\n  code4 = jbig2_arith_int_decode ( params -> IARDY , as , & RDY ) ;\n  }\n  else {\n  RDW = jbig2_huffman_get ( hs , params -> SBHUFFRDW , & code1 ) ;\n  RDH = jbig2_huffman_get ( hs , params -> SBHUFFRDH , & code2 ) ;\n  RDX = jbig2_huffman_get ( hs , params -> SBHUFFRDX , & code3 ) ;\n  RDY = jbig2_huffman_get ( hs , params -> SBHUFFRDY , & code4 ) ;\n  BMSIZE = jbig2_huffman_get ( hs , params -> SBHUFFRSIZE , & code5 ) ;\n  jbig2_huffman_skip ( hs ) ;\n  }\n  if ( ( code1 < 0 ) || ( code2 < 0 ) || ( code3 < 0 ) || ( code4 < 0 ) || ( code5 < 0 ) ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to decode data\" ) ;\n  goto cleanup2 ;\n  }\n  IBO = IB ;\n  refimage = jbig2_image_new ( ctx , IBO -> width + RDW , IBO -> height + RDH ) ;\n  if ( refimage == NULL ) {\n  jbig2_image_release ( ctx , IBO ) ;\n  if ( params -> SBHUFF ) {\n  jbig2_release_huffman_table ( ctx , SBSYMCODES ) ;\n  }\n  return jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"couldn't allocate reference image\" ) ;\n  }\n  jbig2_image_clear ( ctx , refimage , 0x00 ) ;\n  rparams . GRTEMPLATE = params -> SBRTEMPLATE ;\n  rparams . reference = IBO ;\n  rparams . DX = ( RDW >> 1 ) + RDX ;\n  rparams . DY = ( RDH >> 1 ) + RDY ;\n  rparams . TPGRON = 0 ;\n  memcpy ( rparams . grat , params -> sbrat , 4 ) ;\n  code = jbig2_decode_refinement_region ( ctx , segment , & rparams , as , refimage , GR_stats ) ;\n  if ( code < 0 ) {\n  jbig2_image_release ( ctx , refimage ) ;\n  goto cleanup2 ;\n  }\n  IB = refimage ;\n  jbig2_image_release ( ctx , IBO ) ;\n  if ( params -> SBHUFF ) {\n  jbig2_huffman_advance ( hs , BMSIZE ) ;\n  }\n  }\n  if ( ( ! params -> TRANSPOSED ) && ( params -> REFCORNER > 1 ) ) {\n  CURS += IB -> width - 1 ;\n  }\n  else if ( ( params -> TRANSPOSED ) && ! ( params -> REFCORNER & 1 ) ) {\n  CURS += IB -> height - 1 ;\n  }\n  S = CURS ;\n  if ( ! params -> TRANSPOSED ) {\n  switch ( params -> REFCORNER ) {\n  case JBIG2_CORNER_TOPLEFT : x = S ;\n  y = T ;\n  break ;\n  case JBIG2_CORNER_TOPRIGHT : x = S - IB -> width + 1 ;\n  y = T ;\n  break ;\n  case JBIG2_CORNER_BOTTOMLEFT : x = S ;\n  y = T - IB -> height + 1 ;\n  break ;\n  default : case JBIG2_CORNER_BOTTOMRIGHT : x = S - IB -> width + 1 ;\n  y = T - IB -> height + 1 ;\n  break ;\n  }\n  }\n  else {\n  switch ( params -> REFCORNER ) {\n  case JBIG2_CORNER_TOPLEFT : x = T ;\n  y = S ;\n  break ;\n  case JBIG2_CORNER_TOPRIGHT : x = T - IB -> width + 1 ;\n  y = S ;\n  break ;\n  case JBIG2_CORNER_BOTTOMLEFT : x = T ;\n  y = S - IB -> height + 1 ;\n  break ;\n  default : case JBIG2_CORNER_BOTTOMRIGHT : x = T - IB -> width + 1 ;\n  y = S - IB -> height + 1 ;\n  break ;\n  }\n  }\n  # ifdef JBIG2_DEBUG jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"composing glyph id %d: %dx%d @ (%d,%d) symbol %d/%d\" , ID , IB -> width , IB -> height , x , y , NINSTANCES + 1 , params -> SBNUMINSTANCES ) ;\n  # endif code = jbig2_image_compose ( ctx , image , IB , x , y , params -> SBCOMBOP ) ;\n  if ( code < 0 ) {\n  jbig2_image_release ( ctx , IB ) ;\n  goto cleanup2 ;\n  }\n  if ( ( ! params -> TRANSPOSED ) && ( params -> REFCORNER < 2 ) ) {\n  CURS += IB -> width - 1 ;\n  }\n  else if ( ( params -> TRANSPOSED ) && ( params -> REFCORNER & 1 ) ) {\n  CURS += IB -> height - 1 ;\n  }\n  NINSTANCES ++ ;\n  jbig2_image_release ( ctx , IB ) ;\n  }\n  }\n  cleanup2 : if ( params -> SBHUFF ) {\n  jbig2_release_huffman_table ( ctx , SBSYMCODES ) ;\n  }\n  jbig2_huffman_free ( ctx , hs ) ;\n  return code ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , const ID * ID , const ID * const * ID , const int ID , ID * ID , const ID * ID , const ID ID , ID * ID , ID * ID , ID * ID ) { ID ID ; ID ID ; ID ID ; ID ID ; ID ID ; ID ID ; ID ID ; ID ID ; ID ID ; int ID , ID ; int ID , ID ; ID ID ; ID ID , ID ; ID * ID = ID ; ID * ID = ID ; ID * ID = ID ; int ID = 0 ; int ID ; ID = 0 ; for ( ID = 0 ; ID < ID ; ID ++ ) { ID += ID [ ID ] -> ID ; } ID ( ID , ID , ID -> ID , LITERAL , ID , ID ) ; if ( ID -> ID ) { ID * ID = ID ; ID ID ; ID ID [ 3 5 ] ; ID * ID = ID ; ID ID ; int ID , ID , ID , ID ; ID ( ID , ID , ID -> ID , LITERAL ) ; ID = ID ( ID , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; return - 1 ; } for ( ID = 0 ; ID < 3 5 ; ID ++ ) { ID [ ID ] . ID = ID ( ID , 4 , & ID ) ; if ( ID < 0 ) goto ID ; ID [ ID ] . ID = 0 ; ID [ ID ] . ID = ID ; ID ( ID , ID , ID -> ID , LITERAL , ID , ID [ ID ] . ID ) ; } ID . ID = 0 ; ID . ID = ID ; ID . ID = 3 5 ; ID = ID ( ID , & ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID = - 1 ; goto ID ; } ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID = - 1 ; goto ID ; } ID = 0 ; while ( ID < ID ) { ID = ID ( ID , ID , & ID ) ; if ( ID != 0 || ID < 0 || ID >= 3 5 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID = ID ? ID : - 1 ; goto ID ; } if ( ID < 3 2 ) { ID = ID ; ID = 1 ; } else { if ( ID == 3 2 ) { if ( ID < 1 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID = - 1 ; goto ID ; } ID = ID [ ID - 1 ] . ID ; } else { ID = 0 ; } ID = 0 ; if ( ID == 3 2 ) ID = ID ( ID , 2 , & ID ) + 3 ; else if ( ID == 3 3 ) ID = ID ( ID , 3 , & ID ) + 3 ; else if ( ID == 3 4 ) ID = ID ( ID , 7 , & ID ) + 1 1 ; if ( ID < 0 ) goto ID ; } ID ( ID , ID , ID -> ID , LITERAL , ID , ID , ID , ID ) ; if ( ID + ID > ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID + ID - ID ) ; ID = ID - ID ; } for ( ID = 0 ; ID < ID ; ID ++ ) { ID [ ID + ID ] . ID = ID ; ID [ ID + ID ] . ID = 0 ; ID [ ID + ID ] . ID = ID + ID ; } ID += ID ; } if ( ID < ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; } ID . ID = 0 ; ID . ID = ID ; ID . ID = ID ; ID ( ID ) ; ID = ID ( ID , & ID ) ; ID : ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; ID ( ID , ID ) ; return ( ( ID != 0 ) ? ID : - 1 ) ; } } ID ( ID , ID , ID -> ID ) ; if ( ID -> ID ) { ID = ID ( ID , ID -> ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID < 0 ) goto ID ; ID *= - ( ID -> ID ) ; ID = 0 ; ID = 0 ; while ( ID < ID -> ID ) { if ( ID -> ID ) { ID = ID ( ID , ID -> ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID < 0 ) goto ID ; ID *= ID -> ID ; ID += ID ; ID = ID ; for ( ; ; ) { if ( ID ) { if ( ID -> ID ) { ID = ID ( ID , ID -> ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID < 0 ) goto ID ; ID += ID ; ID = ID ; ID = ID ; } else { if ( ID > ID -> ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID ) ; break ; } if ( ID -> ID ) { ID = ID ( ID , ID -> ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID ) { break ; } ID += ID + ID -> ID ; } if ( ID -> ID == 1 ) { ID = 0 ; } else if ( ID -> ID ) { ID = ID ( ID , ID -> ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID < 0 ) goto ID ; ID = ID + ID ; if ( ID -> ID ) { ID = ID ( ID , ID , & ID ) ; } else { ID = ID ( ID -> ID , ID , ( int * ) & ID ) ; } if ( ID < 0 ) goto ID ; if ( ID >= ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID , ID ) ; goto ID ; } { ID ID = ID ; ID = 0 ; while ( ID >= ID [ ID ] -> ID ) ID -= ID [ ID ++ ] -> ID ; ID = ID ( ID , ID [ ID ] -> ID [ ID ] ) ; if ( ! ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL , ID , ID ) ; goto ID ; } } if ( ID -> ID ) { if ( ID -> ID ) { ID = ID ( ID , 1 , & ID ) ; } else { ID = ID ( ID -> ID , ID , & ID ) ; } if ( ID < 0 ) goto ID ; } else { ID = 0 ; } if ( ID ) { ID ID ; ID * ID ; ID ID , ID , ID , ID ; ID * ID ; int ID = 0 ; int ID = 0 ; int ID = 0 ; int ID = 0 ; int ID = 0 ; int ID = 0 ; if ( ! ID -> ID ) { ID = ID ( ID -> ID , ID , & ID ) ; ID = ID ( ID -> ID , ID , & ID ) ; ID = ID ( ID -> ID , ID , & ID ) ; ID = ID ( ID -> ID , ID , & ID ) ; } else { ID = ID ( ID , ID -> ID , & ID ) ; ID = ID ( ID , ID -> ID , & ID ) ; ID = ID ( ID , ID -> ID , & ID ) ; ID = ID ( ID , ID -> ID , & ID ) ; ID = ID ( ID , ID -> ID , & ID ) ; ID ( ID ) ; } if ( ( ID < 0 ) || ( ID < 0 ) || ( ID < 0 ) || ( ID < 0 ) || ( ID < 0 ) ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ; ID = ID ( ID , ID -> ID + ID , ID -> ID + ID ) ; if ( ID == ID ) { ID ( ID , ID ) ; if ( ID -> ID ) { ID ( ID , ID ) ; } return ID ( ID , ID , ID -> ID , LITERAL ) ; } ID ( ID , ID , 0 x 0 0 ) ; ID . ID = ID -> ID ; ID . ID = ID ; ID . ID = ( ID >> 1 ) + ID ; ID . ID = ( ID >> 1 ) + ID ; ID . ID = 0 ; ID ( ID . ID , ID -> ID , 4 ) ; ID = ID ( ID , ID , & ID , ID , ID , ID ) ; if ( ID < 0 ) { ID ( ID , ID ) ; goto ID ; } ID = ID ; ID ( ID , ID ) ; if ( ID -> ID ) { ID ( ID , ID ) ; } } if ( ( ! ID -> ID ) && ( ID -> ID > 1 ) ) { ID += ID -> ID - 1 ; } else if ( ( ID -> ID ) && ! ( ID -> ID & 1 ) ) { ID += ID -> ID - 1 ; } ID = ID ; if ( ! ID -> ID ) { switch ( ID -> ID ) { case ID : ID = ID ; ID = ID ; break ; case ID : ID = ID - ID -> ID + 1 ; ID = ID ; break ; case ID : ID = ID ; ID = ID - ID -> ID + 1 ; break ; default : case ID : ID = ID - ID -> ID + 1 ; ID = ID - ID -> ID + 1 ; break ; } } else { switch ( ID -> ID ) { case ID : ID = ID ; ID = ID ; break ; case ID : ID = ID - ID -> ID + 1 ; ID = ID ; break ; case ID : ID = ID ; ID = ID - ID -> ID + 1 ; break ; default : case ID : ID = ID - ID -> ID + 1 ; ID = ID - ID -> ID + 1 ; break ; } } # ID ID ID ( ID , ID , ID -> ID , LITERAL , ID , ID -> ID , ID -> ID , ID , ID , ID + 1 , ID -> ID ) ; # ID ID = ID ( ID , ID , ID , ID , ID , ID -> ID ) ; if ( ID < 0 ) { ID ( ID , ID ) ; goto ID ; } if ( ( ! ID -> ID ) && ( ID -> ID < 2 ) ) { ID += ID -> ID - 1 ; } else if ( ( ID -> ID ) && ( ID -> ID & 1 ) ) { ID += ID -> ID - 1 ; } ID ++ ; ID ( ID , ID ) ; } } ID : if ( ID -> ID ) { ID ( ID , ID ) ; } ID ( ID , ID ) ; return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/4_1.c", "code": "int jbig2_immediate_generic_region ( Jbig2Ctx * ctx , Jbig2Segment * segment , const byte * segment_data ) {\n  Jbig2RegionSegmentInfo rsi ;\n  byte seg_flags ;\n  int8_t gbat [ 8 ] ;\n  int offset ;\n  int gbat_bytes = 0 ;\n  Jbig2GenericRegionParams params ;\n  int code = 0 ;\n  Jbig2Image * image = NULL ;\n  Jbig2WordStream * ws = NULL ;\n  Jbig2ArithState * as = NULL ;\n  Jbig2ArithCx * GB_stats = NULL ;\n  if ( segment -> data_length < 18 ) return jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Segment too short\" ) ;\n  jbig2_get_region_segment_info ( & rsi , segment_data ) ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_INFO , segment -> number , \"generic region: %d x %d @ (%d, %d), flags = %02x\" , rsi . width , rsi . height , rsi . x , rsi . y , rsi . flags ) ;\n  seg_flags = segment_data [ 17 ] ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_INFO , segment -> number , \"segment flags = %02x\" , seg_flags ) ;\n  if ( ( seg_flags & 1 ) && ( seg_flags & 6 ) ) jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"MMR is 1, but GBTEMPLATE is not 0\" ) ;\n  if ( ! ( seg_flags & 1 ) ) {\n  gbat_bytes = ( seg_flags & 6 ) ? 2 : 8 ;\n  if ( 18 + gbat_bytes > segment -> data_length ) return jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"Segment too short\" ) ;\n  memcpy ( gbat , segment_data + 18 , gbat_bytes ) ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_INFO , segment -> number , \"gbat: %d, %d\" , gbat [ 0 ] , gbat [ 1 ] ) ;\n  }\n  offset = 18 + gbat_bytes ;\n  params . MMR = seg_flags & 1 ;\n  params . GBTEMPLATE = ( seg_flags & 6 ) >> 1 ;\n  params . TPGDON = ( seg_flags & 8 ) >> 3 ;\n  params . USESKIP = 0 ;\n  memcpy ( params . gbat , gbat , gbat_bytes ) ;\n  image = jbig2_image_new ( ctx , rsi . width , rsi . height ) ;\n  if ( image == NULL ) return jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"unable to allocate generic image\" ) ;\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , segment -> number , \"allocated %d x %d image buffer for region decode results\" , rsi . width , rsi . height ) ;\n  if ( params . MMR ) {\n  code = jbig2_decode_generic_mmr ( ctx , segment , & params , segment_data + offset , segment -> data_length - offset , image ) ;\n  }\n  else {\n  int stats_size = jbig2_generic_stats_size ( ctx , params . GBTEMPLATE ) ;\n  GB_stats = jbig2_new ( ctx , Jbig2ArithCx , stats_size ) ;\n  if ( GB_stats == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"unable to allocate GB_stats in jbig2_immediate_generic_region\" ) ;\n  goto cleanup ;\n  }\n  memset ( GB_stats , 0 , stats_size ) ;\n  ws = jbig2_word_stream_buf_new ( ctx , segment_data + offset , segment -> data_length - offset ) ;\n  if ( ws == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"unable to allocate ws in jbig2_immediate_generic_region\" ) ;\n  goto cleanup ;\n  }\n  as = jbig2_arith_new ( ctx , ws ) ;\n  if ( as == NULL ) {\n  code = jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"unable to allocate as in jbig2_immediate_generic_region\" ) ;\n  goto cleanup ;\n  }\n  code = jbig2_decode_generic_region ( ctx , segment , & params , as , image , GB_stats ) ;\n  }\n  if ( code >= 0 ) jbig2_page_add_result ( ctx , & ctx -> pages [ ctx -> current_page ] , image , rsi . x , rsi . y , rsi . op ) ;\n  else jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error while decoding immediate_generic_region\" ) ;\n  cleanup : jbig2_free ( ctx -> allocator , as ) ;\n  jbig2_word_stream_buf_free ( ctx , ws ) ;\n  jbig2_free ( ctx -> allocator , GB_stats ) ;\n  jbig2_image_release ( ctx , image ) ;\n  return code ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , const ID * ID ) { ID ID ; ID ID ; ID ID [ 8 ] ; int ID ; int ID = 0 ; ID ID ; int ID = 0 ; ID * ID = ID ; ID * ID = ID ; ID * ID = ID ; ID * ID = ID ; if ( ID -> ID < 1 8 ) return ID ( ID , ID , ID -> ID , LITERAL ) ; ID ( & ID , ID ) ; ID ( ID , ID , ID -> ID , LITERAL , ID . ID , ID . ID , ID . ID , ID . ID , ID . ID ) ; ID = ID [ 1 7 ] ; ID ( ID , ID , ID -> ID , LITERAL , ID ) ; if ( ( ID & 1 ) && ( ID & 6 ) ) ID ( ID , ID , ID -> ID , LITERAL ) ; if ( ! ( ID & 1 ) ) { ID = ( ID & 6 ) ? 2 : 8 ; if ( 1 8 + ID > ID -> ID ) return ID ( ID , ID , ID -> ID , LITERAL ) ; ID ( ID , ID + 1 8 , ID ) ; ID ( ID , ID , ID -> ID , LITERAL , ID [ 0 ] , ID [ 1 ] ) ; } ID = 1 8 + ID ; ID . ID = ID & 1 ; ID . ID = ( ID & 6 ) >> 1 ; ID . ID = ( ID & 8 ) >> 3 ; ID . ID = 0 ; ID ( ID . ID , ID , ID ) ; ID = ID ( ID , ID . ID , ID . ID ) ; if ( ID == ID ) return ID ( ID , ID , ID -> ID , LITERAL ) ; ID ( ID , ID , ID -> ID , LITERAL , ID . ID , ID . ID ) ; if ( ID . ID ) { ID = ID ( ID , ID , & ID , ID + ID , ID -> ID - ID , ID ) ; } else { int ID = ID ( ID , ID . ID ) ; ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID ( ID , 0 , ID ) ; ID = ID ( ID , ID + ID , ID -> ID - ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID ) ; if ( ID == ID ) { ID = ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID , & ID , ID , ID , ID ) ; } if ( ID >= 0 ) ID ( ID , & ID -> ID [ ID -> ID ] , ID , ID . ID , ID . ID , ID . ID ) ; else ID ( ID , ID , ID -> ID , LITERAL ) ; ID : ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; return ID ; }", "call_slices_vd": [[1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 44], [1, 4, 13, 16, 19, 20, 21, 22], [1, 4, 6, 7, 13, 16, 19, 20, 21, 26, 27, 28, 29, 30]], "call_slices_sy": [[1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 44], [1, 4, 13, 16, 19, 20, 21, 22], [1, 4, 6, 7, 13, 16, 19, 20, 21, 26, 27, 28, 29, 30]], "array_slices_vd": [[1, 13, 16], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 45, 46, 50, 51, 55, 57], [1, 4, 13, 16, 19, 20, 21, 23]], "array_slices_sy": [[1, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 45, 46, 50, 51, 55, 57, 58], [1, 4, 13, 16, 19, 20, 21, 23]], "arith_slices_vd": [[1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45], [1, 13, 16, 19, 20, 21], [1, 4, 13, 16, 19, 20, 21, 22], [1, 6, 13, 16, 19, 20, 21, 25]], "arith_slices_sy": [[1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 57, 58, 63], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 63], [1, 13, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63], [1, 4, 13, 16, 19, 20, 21, 22], [1, 6, 13, 16, 19, 20, 21, 25, 35, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 63]], "ptr_slices_vd": [[1, 2, 9, 10, 11, 12, 13, 16, 19, 20, 21, 31, 32], [1, 2, 9, 10, 11, 12, 13, 16, 19, 20, 21, 31, 32, 33], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35], [1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 41], [1, 13], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45], [1, 2, 13, 15], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 47], [1, 13, 16, 17], [1, 13, 16, 18], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 50, 51, 52], [1, 13, 16, 19, 20, 21], [1, 4, 13, 16, 19, 20, 21, 23], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 45, 46, 50, 51, 55, 57], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 50, 59], [1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 61]], "ptr_slices_sy": [[1, 2, 9, 10, 11, 12, 13, 16, 19, 20, 21, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63], [1, 2, 9, 10, 11, 12, 13, 16, 19, 20, 21, 31, 32, 33], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 57, 58, 63], [1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 41, 63], [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 63], [1, 2, 13, 15], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 47, 63], [1, 13, 16, 17], [1, 13, 16, 18], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 50, 51, 52, 63], [1, 13, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63], [1, 4, 13, 16, 19, 20, 21, 23], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 45, 46, 50, 51, 55, 57, 58], [1, 2, 6, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 25, 26, 27, 28, 29, 31, 32, 34, 38, 39, 40, 45, 46, 50, 59], [1, 2, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 26, 27, 28, 29, 31, 32, 34, 38, 39, 61]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/5_0.c", "code": "static __inline __uint64_t __uint64_identity ( __uint64_t __x ) {\n  return __x ;\n  }", "tokenized": "static __inline ID ID ( ID ID ) { return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/5_1.c", "code": "int jbig2_decode_halftone_region ( Jbig2Ctx * ctx , Jbig2Segment * segment , Jbig2HalftoneRegionParams * params , const byte * data , const size_t size , Jbig2Image * image , Jbig2ArithCx * GB_stats ) {\n  uint32_t HBPP ;\n  uint32_t HNUMPATS ;\n  uint8_t * * GI ;\n  Jbig2Image * HSKIP = NULL ;\n  Jbig2PatternDict * HPATS ;\n  int i ;\n  uint32_t mg , ng ;\n  int32_t x , y ;\n  uint8_t gray_val ;\n  memset ( image -> data , params -> HDEFPIXEL , image -> stride * image -> height ) ;\n  if ( params -> HENABLESKIP == 1 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"unhandled option HENABLESKIP\" ) ;\n  }\n  HPATS = jbig2_decode_ht_region_get_hpats ( ctx , segment ) ;\n  if ( ! HPATS ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"no pattern dictionary found, skipping halftone image\" ) ;\n  return - 1 ;\n  }\n  HNUMPATS = HPATS -> n_patterns ;\n  HBPP = 0 ;\n  while ( HNUMPATS > ( 1 << ++ HBPP ) ) ;\n  GI = jbig2_decode_gray_scale_image ( ctx , segment , data , size , params -> HMMR , params -> HGW , params -> HGH , HBPP , params -> HENABLESKIP , HSKIP , params -> HTEMPLATE , GB_stats ) ;\n  if ( ! GI ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"unable to acquire gray-scale image, skipping halftone image\" ) ;\n  return - 1 ;\n  }\n  for ( mg = 0 ;\n  mg < params -> HGH ;\n  ++ mg ) {\n  for ( ng = 0 ;\n  ng < params -> HGW ;\n  ++ ng ) {\n  x = ( params -> HGX + mg * params -> HRY + ng * params -> HRX ) >> 8 ;\n  y = ( params -> HGY + mg * params -> HRX - ng * params -> HRY ) >> 8 ;\n  gray_val = GI [ ng ] [ mg ] ;\n  if ( gray_val >= HNUMPATS ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"gray-scale image uses value %d which larger than pattern dictionary\" , gray_val ) ;\n  gray_val = HNUMPATS - 1 ;\n  }\n  jbig2_image_compose ( ctx , image , HPATS -> patterns [ gray_val ] , x , y , params -> op ) ;\n  }\n  }\n  for ( i = 0 ;\n  i < params -> HGW ;\n  ++ i ) {\n  jbig2_free ( ctx -> allocator , GI [ i ] ) ;\n  }\n  jbig2_free ( ctx -> allocator , GI ) ;\n  return 0 ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , ID * ID , const ID * ID , const ID ID , ID * ID , ID * ID ) { ID ID ; ID ID ; ID * * ID ; ID * ID = ID ; ID * ID ; int ID ; ID ID , ID ; ID ID , ID ; ID ID ; ID ( ID -> ID , ID -> ID , ID -> ID * ID -> ID ) ; if ( ID -> ID == 1 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; } ID = ID ( ID , ID ) ; if ( ! ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; return - 1 ; } ID = ID -> ID ; ID = 0 ; while ( ID > ( 1 << ++ ID ) ) ; ID = ID ( ID , ID , ID , ID , ID -> ID , ID -> ID , ID -> ID , ID , ID -> ID , ID , ID -> ID , ID ) ; if ( ! ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; return - 1 ; } for ( ID = 0 ; ID < ID -> ID ; ++ ID ) { for ( ID = 0 ; ID < ID -> ID ; ++ ID ) { ID = ( ID -> ID + ID * ID -> ID + ID * ID -> ID ) >> 8 ; ID = ( ID -> ID + ID * ID -> ID - ID * ID -> ID ) >> 8 ; ID = ID [ ID ] [ ID ] ; if ( ID >= ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID ) ; ID = ID - 1 ; } ID ( ID , ID , ID -> ID [ ID ] , ID , ID , ID -> ID ) ; } } for ( ID = 0 ; ID < ID -> ID ; ++ ID ) { ID ( ID -> ID , ID [ ID ] ) ; } ID ( ID -> ID , ID ) ; return 0 ; }", "call_slices_vd": [[1, 11]], "call_slices_sy": [[1, 11]], "array_slices_vd": [[1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 34, 35, 36, 37, 39, 41], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 36], [1, 5, 15, 16, 21, 23, 24, 44, 45, 47]], "array_slices_sy": [[1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 34, 35, 36, 37, 39, 41], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 36, 37, 38, 39, 41], [1, 5, 15, 16, 21, 23, 24, 44, 45, 47]], "arith_slices_vd": [[1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 35], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 34], [1, 11], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 36, 37, 39]], "arith_slices_sy": [[1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 35, 41], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 34, 41], [1, 11], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 36, 37, 39, 41]], "ptr_slices_vd": [[1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 34], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 35], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 36, 37, 38], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 34, 35, 36, 37, 39, 41], [1, 11], [1, 12], [1, 5, 15, 16, 21, 23, 24, 44, 45], [1, 5, 15, 16, 21, 23, 24, 44, 45, 47], [1, 15, 16, 17], [1, 5, 15, 16, 21, 23, 24, 49], [1, 15, 16, 20], [1, 5, 15, 16, 21, 23], [1, 5, 15, 16, 21, 23, 24, 25], [1, 5, 15, 16, 21, 23, 24, 28, 29]], "ptr_slices_sy": [[1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 34, 41], [1, 5, 15, 16, 21, 23, 24, 28, 29, 31, 32, 35, 41], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 36, 37, 38], [1, 5, 15, 16, 20, 21, 23, 24, 28, 29, 31, 32, 34, 35, 36, 37, 39, 41], [1, 11], [1, 12, 13], [1, 5, 15, 16, 21, 23, 24, 44, 45, 46, 47], [1, 5, 15, 16, 21, 23, 24, 44, 45, 47], [1, 15, 16, 17], [1, 5, 15, 16, 21, 23, 24, 49], [1, 15, 16, 20, 22, 37, 38, 39, 41], [1, 5, 15, 16, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 49, 50], [1, 5, 15, 16, 21, 23, 24, 25], [1, 5, 15, 16, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/6_0.c", "code": "int curl_mvsnprintf ( char * buffer , size_t maxlength , const char * format , va_list ap_save ) {\n  int retcode ;\n  struct nsprintf info ;\n  info . buffer = buffer ;\n  info . length = 0 ;\n  info . max = maxlength ;\n  retcode = dprintf_formatf ( & info , addbyter , format , ap_save ) ;\n  if ( ( retcode != - 1 ) && info . max ) {\n  if ( info . max == info . length ) info . buffer [ - 1 ] = 0 ;\n  else info . buffer [ 0 ] = 0 ;\n  }\n  return retcode ;\n  }", "tokenized": "int ID ( char * ID , ID ID , const char * ID , ID ID ) { int ID ; struct ID ID ; ID . ID = ID ; ID . ID = 0 ; ID . ID = ID ; ID = ID ( & ID , ID , ID , ID ) ; if ( ( ID != - 1 ) && ID . ID ) { if ( ID . ID == ID . ID ) ID . ID [ - 1 ] = 0 ; else ID . ID [ 0 ] = 0 ; } return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [[1, 3, 4, 5, 6, 7, 8, 9]], "array_slices_sy": [[1, 3, 4, 5, 6, 7, 8, 9, 10]], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/6_1.c", "code": "uint8_t * * jbig2_decode_gray_scale_image ( Jbig2Ctx * ctx , Jbig2Segment * segment , const byte * data , const size_t size , bool GSMMR , uint32_t GSW , uint32_t GSH , uint32_t GSBPP , bool GSUSESKIP , Jbig2Image * GSKIP , int GSTEMPLATE , Jbig2ArithCx * GB_stats ) {\n  uint8_t * * GSVALS = NULL ;\n  size_t consumed_bytes = 0 ;\n  int i , j , code , stride ;\n  int x , y ;\n  Jbig2Image * * GSPLANES ;\n  Jbig2GenericRegionParams rparams ;\n  Jbig2WordStream * ws = NULL ;\n  Jbig2ArithState * as = NULL ;\n  GSPLANES = jbig2_new ( ctx , Jbig2Image * , GSBPP ) ;\n  if ( GSPLANES == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate %d bytes for GSPLANES\" , GSBPP ) ;\n  return NULL ;\n  }\n  for ( i = 0 ;\n  i < GSBPP ;\n  ++ i ) {\n  GSPLANES [ i ] = jbig2_image_new ( ctx , GSW , GSH ) ;\n  if ( GSPLANES [ i ] == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate %dx%d image for GSPLANES\" , GSW , GSH ) ;\n  for ( j = i - 1 ;\n  j >= 0 ;\n  -- j ) {\n  jbig2_image_release ( ctx , GSPLANES [ j ] ) ;\n  }\n  jbig2_free ( ctx -> allocator , GSPLANES ) ;\n  return NULL ;\n  }\n  }\n  rparams . MMR = GSMMR ;\n  rparams . GBTEMPLATE = GSTEMPLATE ;\n  rparams . TPGDON = 0 ;\n  rparams . USESKIP = GSUSESKIP ;\n  rparams . gbat [ 0 ] = ( GSTEMPLATE <= 1 ? 3 : 2 ) ;\n  rparams . gbat [ 1 ] = - 1 ;\n  rparams . gbat [ 2 ] = - 3 ;\n  rparams . gbat [ 3 ] = - 1 ;\n  rparams . gbat [ 4 ] = 2 ;\n  rparams . gbat [ 5 ] = - 2 ;\n  rparams . gbat [ 6 ] = - 2 ;\n  rparams . gbat [ 7 ] = - 2 ;\n  if ( GSMMR ) {\n  code = jbig2_decode_halftone_mmr ( ctx , & rparams , data , size , GSPLANES [ GSBPP - 1 ] , & consumed_bytes ) ;\n  }\n  else {\n  ws = jbig2_word_stream_buf_new ( ctx , data , size ) ;\n  if ( ws == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate ws in jbig2_decode_gray_scale_image\" ) ;\n  goto cleanup ;\n  }\n  as = jbig2_arith_new ( ctx , ws ) ;\n  if ( as == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate as in jbig2_decode_gray_scale_image\" ) ;\n  goto cleanup ;\n  }\n  code = jbig2_decode_generic_region ( ctx , segment , & rparams , as , GSPLANES [ GSBPP - 1 ] , GB_stats ) ;\n  }\n  if ( code != 0 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error decoding GSPLANES for halftone image\" ) ;\n  goto cleanup ;\n  }\n  j = GSBPP - 2 ;\n  while ( j >= 0 ) {\n  if ( GSMMR ) {\n  code = jbig2_decode_halftone_mmr ( ctx , & rparams , data + consumed_bytes , size - consumed_bytes , GSPLANES [ j ] , & consumed_bytes ) ;\n  }\n  else {\n  code = jbig2_decode_generic_region ( ctx , segment , & rparams , as , GSPLANES [ j ] , GB_stats ) ;\n  }\n  if ( code != 0 ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"error decoding GSPLANES for halftone image\" ) ;\n  goto cleanup ;\n  }\n  stride = GSPLANES [ 0 ] -> stride ;\n  for ( i = 0 ;\n  i < stride * GSH ;\n  ++ i ) GSPLANES [ j ] -> data [ i ] ^= GSPLANES [ j + 1 ] -> data [ i ] ;\n  -- j ;\n  }\n  GSVALS = jbig2_new ( ctx , uint8_t * , GSW ) ;\n  if ( GSVALS == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate GSVALS: %d bytes\" , GSW ) ;\n  goto cleanup ;\n  }\n  for ( i = 0 ;\n  i < GSW ;\n  ++ i ) {\n  GSVALS [ i ] = jbig2_new ( ctx , uint8_t , GSH ) ;\n  if ( GSVALS [ i ] == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_FATAL , segment -> number , \"failed to allocate GSVALS: %d bytes\" , GSH * GSW ) ;\n  for ( j = i - 1 ;\n  j >= 0 ;\n  -- j ) {\n  jbig2_free ( ctx -> allocator , GSVALS [ j ] ) ;\n  }\n  jbig2_free ( ctx -> allocator , GSVALS ) ;\n  GSVALS = NULL ;\n  goto cleanup ;\n  }\n  }\n  for ( x = 0 ;\n  x < GSW ;\n  ++ x ) {\n  for ( y = 0 ;\n  y < GSH ;\n  ++ y ) {\n  GSVALS [ x ] [ y ] = 0 ;\n  for ( j = 0 ;\n  j < GSBPP ;\n  ++ j ) GSVALS [ x ] [ y ] += jbig2_image_get_pixel ( GSPLANES [ j ] , x , y ) << j ;\n  }\n  }\n  cleanup : if ( ! GSMMR ) {\n  jbig2_free ( ctx -> allocator , as ) ;\n  jbig2_word_stream_buf_free ( ctx , ws ) ;\n  }\n  for ( i = 0 ;\n  i < GSBPP ;\n  ++ i ) jbig2_image_release ( ctx , GSPLANES [ i ] ) ;\n  jbig2_free ( ctx -> allocator , GSPLANES ) ;\n  return GSVALS ;\n  }", "tokenized": "ID * * ID ( ID * ID , ID * ID , const ID * ID , const ID ID , ID ID , ID ID , ID ID , ID ID , ID ID , ID * ID , int ID , ID * ID ) { ID * * ID = ID ; ID ID = 0 ; int ID , ID , ID , ID ; int ID , ID ; ID * * ID ; ID ID ; ID * ID = ID ; ID * ID = ID ; ID = ID ( ID , ID * , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID ) ; return ID ; } for ( ID = 0 ; ID < ID ; ++ ID ) { ID [ ID ] = ID ( ID , ID , ID ) ; if ( ID [ ID ] == ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID , ID ) ; for ( ID = ID - 1 ; ID >= 0 ; -- ID ) { ID ( ID , ID [ ID ] ) ; } ID ( ID -> ID , ID ) ; return ID ; } } ID . ID = ID ; ID . ID = ID ; ID . ID = 0 ; ID . ID = ID ; ID . ID [ 0 ] = ( ID <= 1 ? 3 : 2 ) ; ID . ID [ 1 ] = - 1 ; ID . ID [ 2 ] = - 3 ; ID . ID [ 3 ] = - 1 ; ID . ID [ 4 ] = 2 ; ID . ID [ 5 ] = - 2 ; ID . ID [ 6 ] = - 2 ; ID . ID [ 7 ] = - 2 ; if ( ID ) { ID = ID ( ID , & ID , ID , ID , ID [ ID - 1 ] , & ID ) ; } else { ID = ID ( ID , ID , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID ( ID , ID , & ID , ID , ID [ ID - 1 ] , ID ) ; } if ( ID != 0 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID - 2 ; while ( ID >= 0 ) { if ( ID ) { ID = ID ( ID , & ID , ID + ID , ID - ID , ID [ ID ] , & ID ) ; } else { ID = ID ( ID , ID , & ID , ID , ID [ ID ] , ID ) ; } if ( ID != 0 ) { ID ( ID , ID , ID -> ID , LITERAL ) ; goto ID ; } ID = ID [ 0 ] -> ID ; for ( ID = 0 ; ID < ID * ID ; ++ ID ) ID [ ID ] -> ID [ ID ] ^= ID [ ID + 1 ] -> ID [ ID ] ; -- ID ; } ID = ID ( ID , ID * , ID ) ; if ( ID == ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID ) ; goto ID ; } for ( ID = 0 ; ID < ID ; ++ ID ) { ID [ ID ] = ID ( ID , ID , ID ) ; if ( ID [ ID ] == ID ) { ID ( ID , ID , ID -> ID , LITERAL , ID * ID ) ; for ( ID = ID - 1 ; ID >= 0 ; -- ID ) { ID ( ID -> ID , ID [ ID ] ) ; } ID ( ID -> ID , ID ) ; ID = ID ; goto ID ; } } for ( ID = 0 ; ID < ID ; ++ ID ) { for ( ID = 0 ; ID < ID ; ++ ID ) { ID [ ID ] [ ID ] = 0 ; for ( ID = 0 ; ID < ID ; ++ ID ) ID [ ID ] [ ID ] += ID ( ID [ ID ] , ID , ID ) << ID ; } } ID : if ( ! ID ) { ID ( ID -> ID , ID ) ; ID ( ID , ID ) ; } for ( ID = 0 ; ID < ID ; ++ ID ) ID ( ID , ID [ ID ] ) ; ID ( ID -> ID , ID ) ; return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [[1, 2, 6, 8, 9, 11, 15, 16, 18, 19], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 21, 22, 24], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 34], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 35], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 36], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 37], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 38], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 39], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 40], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 41], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 56], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91, 92, 94], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 101, 102, 104, 105, 107], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 101, 102, 104, 105, 107, 108, 109, 110], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77, 81, 85, 86, 88, 89, 117, 118, 119]], "array_slices_sy": [[1, 2, 6, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 21, 22, 24], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 34], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 35], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 36], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 37], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 38], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 39], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 40], [1, 2, 6, 7, 8, 9, 11, 15, 16, 18, 19, 30, 31, 32, 33, 41], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 56, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 76, 77, 119], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77, 119], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91, 92, 94], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 101, 102, 104, 105, 107, 110], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 101, 102, 104, 105, 107, 108, 109, 110], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77, 81, 85, 86, 88, 89, 117, 118, 119]], "arith_slices_vd": [[1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 21], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 56], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 90], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62]], "arith_slices_sy": [[1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77, 119], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 21, 22, 23, 24], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 56, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 90], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91, 92, 93, 94], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 121]], "ptr_slices_vd": [[1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 96], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 90], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 71], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74], [1, 2, 6, 8, 9, 11, 12], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 48], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 82], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 113, 114], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 20], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 53], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 120], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 26], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 59], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91, 92, 94]], "ptr_slices_sy": [[1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 96], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 90], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 71], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 76, 77, 119], [1, 2, 6, 8, 9, 11, 12], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 74, 75, 76, 77, 119], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 48], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 82], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 113, 114], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 20], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 46, 47, 51, 52, 53], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 120], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 26], [1, 2, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 59], [1, 2, 3, 6, 8, 9, 11, 15, 16, 18, 19, 42, 43, 46, 47, 51, 52, 56, 58, 62, 63, 64, 65, 68, 70, 81, 85, 86, 88, 89, 91, 92, 94]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/7_0.c", "code": "int curl_msprintf ( char * buffer , const char * format , ... ) {\n  va_list ap_save ;\n  int retcode ;\n  va_start ( ap_save , format ) ;\n  retcode = dprintf_formatf ( & buffer , storebuffer , format , ap_save ) ;\n  va_end ( ap_save ) ;\n  * buffer = 0 ;\n  return retcode ;\n  }", "tokenized": "int ID ( char * ID , const char * ID , ... ) { ID ID ; int ID ; ID ( ID , ID ) ; ID = ID ( & ID , ID , ID , ID ) ; ID ( ID ) ; * ID = 0 ; return ID ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/7_1.c", "code": "int jbig2_page_add_result ( Jbig2Ctx * ctx , Jbig2Page * page , Jbig2Image * image , int x , int y , Jbig2ComposeOp op ) {\n  if ( page -> image == NULL ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , - 1 , \"page info possibly missing, no image defined\" ) ;\n  return 0 ;\n  }\n  if ( page -> striped ) {\n  int new_height = y + image -> height + page -> end_row ;\n  if ( page -> image -> height < new_height ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , - 1 , \"growing page buffer to %d rows \" \"to accomodate new stripe\" , new_height ) ;\n  jbig2_image_resize ( ctx , page -> image , page -> image -> width , new_height ) ;\n  }\n  }\n  jbig2_image_compose ( ctx , page -> image , image , x , y + page -> end_row , op ) ;\n  return 0 ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , ID * ID , int ID , int ID , ID ID ) { if ( ID -> ID == ID ) { ID ( ID , ID , - 1 , LITERAL ) ; return 0 ; } if ( ID -> ID ) { int ID = ID + ID -> ID + ID -> ID ; if ( ID -> ID -> ID < ID ) { ID ( ID , ID , - 1 , LITERAL LITERAL , ID ) ; ID ( ID , ID -> ID , ID -> ID -> ID , ID ) ; } } ID ( ID , ID -> ID , ID , ID , ID + ID -> ID , ID ) ; return 0 ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [[1, 2, 13], [1, 2, 6, 7]], "arith_slices_sy": [[1, 2, 13], [1, 2, 6, 7, 8, 9, 10]], "ptr_slices_vd": [[1, 2], [1, 2, 6], [1, 2, 6, 7, 8, 10], [1, 2, 13]], "ptr_slices_sy": [[1, 2, 3, 4, 6, 7, 8, 9, 10, 13, 14], [1, 2, 6, 7, 8, 9, 10], [1, 2, 6, 7, 8, 10], [1, 2, 13]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/8_1.c", "code": "int jbig2_end_of_stripe ( Jbig2Ctx * ctx , Jbig2Segment * segment , const uint8_t * segment_data ) {\n  Jbig2Page page = ctx -> pages [ ctx -> current_page ] ;\n  int end_row ;\n  end_row = jbig2_get_int32 ( segment_data ) ;\n  if ( end_row < page . end_row ) {\n  jbig2_error ( ctx , JBIG2_SEVERITY_WARNING , segment -> number , \"end of stripe segment with non-positive end row advance\" \" (new end row %d vs current end row %d)\" , end_row , page . end_row ) ;\n  }\n  else {\n  jbig2_error ( ctx , JBIG2_SEVERITY_INFO , segment -> number , \"end of stripe: advancing end row to %d\" , end_row ) ;\n  }\n  page . end_row = end_row ;\n  return 0 ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , const ID * ID ) { ID ID = ID -> ID [ ID -> ID ] ; int ID ; ID = ID ( ID ) ; if ( ID < ID . ID ) { ID ( ID , ID , ID -> ID , LITERAL LITERAL , ID , ID . ID ) ; } else { ID ( ID , ID , ID -> ID , LITERAL , ID ) ; } ID . ID = ID ; return 0 ; }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [[1, 2]], "array_slices_sy": [[1, 2, 5, 6, 9, 11]], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [[1, 2, 4, 5, 9], [1, 2]], "ptr_slices_sy": [[1, 2, 4, 5, 9], [1, 2, 5, 6, 9, 11]], "label": 1}, {"file_path": "../data/chrome_debian/raw_code/9_0.c", "code": "static int dprintf_Pass1 ( const char * format , va_stack_t * vto , char * * endpos , va_list arglist ) {\n  char * fmt = ( char * ) format ;\n  int param_num = 0 ;\n  long this_param ;\n  long width ;\n  long precision ;\n  int flags ;\n  long max_param = 0 ;\n  long i ;\n  while ( * fmt ) {\n  if ( * fmt ++ == '%' ) {\n  if ( * fmt == '%' ) {\n  fmt ++ ;\n  continue ;\n  }\n  flags = FLAGS_NEW ;\n  param_num ++ ;\n  this_param = dprintf_DollarString ( fmt , & fmt ) ;\n  if ( 0 == this_param ) this_param = param_num ;\n  if ( this_param > max_param ) max_param = this_param ;\n  width = 0 ;\n  precision = 0 ;\n  while ( dprintf_IsQualifierNoDollar ( fmt ) ) {\n  # if defined ( MP_HAVE_INT_EXTENSIONS ) if ( ! strncmp ( fmt , \"I32\" , 3 ) ) {\n  flags |= FLAGS_LONG ;\n  fmt += 3 ;\n  }\n  else if ( ! strncmp ( fmt , \"I64\" , 3 ) ) {\n  flags |= FLAGS_LONGLONG ;\n  fmt += 3 ;\n  }\n  else # endif switch ( * fmt ++ ) {\n  case ' ' : flags |= FLAGS_SPACE ;\n  break ;\n  case '+' : flags |= FLAGS_SHOWSIGN ;\n  break ;\n  case '-' : flags |= FLAGS_LEFT ;\n  flags &= ~ FLAGS_PAD_NIL ;\n  break ;\n  case '#' : flags |= FLAGS_ALT ;\n  break ;\n  case '.' : flags |= FLAGS_PREC ;\n  if ( '*' == * fmt ) {\n  flags |= FLAGS_PRECPARAM ;\n  fmt ++ ;\n  param_num ++ ;\n  i = dprintf_DollarString ( fmt , & fmt ) ;\n  if ( i ) precision = i ;\n  else precision = param_num ;\n  if ( precision > max_param ) max_param = precision ;\n  }\n  else {\n  flags |= FLAGS_PREC ;\n  precision = strtol ( fmt , & fmt , 10 ) ;\n  }\n  break ;\n  case 'h' : flags |= FLAGS_SHORT ;\n  break ;\n  # if defined ( MP_HAVE_INT_EXTENSIONS ) case 'I' : # if ( CURL_SIZEOF_CURL_OFF_T > CURL_SIZEOF_LONG ) flags |= FLAGS_LONGLONG ;\n  # else flags |= FLAGS_LONG ;\n  # endif break ;\n  # endif case 'l' : if ( flags & FLAGS_LONG ) flags |= FLAGS_LONGLONG ;\n  else flags |= FLAGS_LONG ;\n  break ;\n  case 'L' : flags |= FLAGS_LONGDOUBLE ;\n  break ;\n  case 'q' : flags |= FLAGS_LONGLONG ;\n  break ;\n  case 'z' : # if ( SIZEOF_SIZE_T > CURL_SIZEOF_LONG ) flags |= FLAGS_LONGLONG ;\n  # else flags |= FLAGS_LONG ;\n  # endif break ;\n  case 'O' : # if ( CURL_SIZEOF_CURL_OFF_T > CURL_SIZEOF_LONG ) flags |= FLAGS_LONGLONG ;\n  # else flags |= FLAGS_LONG ;\n  # endif break ;\n  case '0' : if ( ! ( flags & FLAGS_LEFT ) ) flags |= FLAGS_PAD_NIL ;\n  case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : flags |= FLAGS_WIDTH ;\n  width = strtol ( fmt - 1 , & fmt , 10 ) ;\n  break ;\n  case '*' : flags |= FLAGS_WIDTHPARAM ;\n  param_num ++ ;\n  i = dprintf_DollarString ( fmt , & fmt ) ;\n  if ( i ) width = i ;\n  else width = param_num ;\n  if ( width > max_param ) max_param = width ;\n  break ;\n  default : break ;\n  }\n  }\n  i = this_param - 1 ;\n  if ( ( i < 0 ) || ( i >= MAX_PARAMETERS ) ) return 1 ;\n  switch ( * fmt ) {\n  case 'S' : flags |= FLAGS_ALT ;\n  case 's' : vto [ i ] . type = FORMAT_STRING ;\n  break ;\n  case 'n' : vto [ i ] . type = FORMAT_INTPTR ;\n  break ;\n  case 'p' : vto [ i ] . type = FORMAT_PTR ;\n  break ;\n  case 'd' : case 'i' : vto [ i ] . type = FORMAT_INT ;\n  break ;\n  case 'u' : vto [ i ] . type = FORMAT_INT ;\n  flags |= FLAGS_UNSIGNED ;\n  break ;\n  case 'o' : vto [ i ] . type = FORMAT_INT ;\n  flags |= FLAGS_OCTAL ;\n  break ;\n  case 'x' : vto [ i ] . type = FORMAT_INT ;\n  flags |= FLAGS_HEX | FLAGS_UNSIGNED ;\n  break ;\n  case 'X' : vto [ i ] . type = FORMAT_INT ;\n  flags |= FLAGS_HEX | FLAGS_UPPER | FLAGS_UNSIGNED ;\n  break ;\n  case 'c' : vto [ i ] . type = FORMAT_INT ;\n  flags |= FLAGS_CHAR ;\n  break ;\n  case 'f' : vto [ i ] . type = FORMAT_DOUBLE ;\n  break ;\n  case 'e' : vto [ i ] . type = FORMAT_DOUBLE ;\n  flags |= FLAGS_FLOATE ;\n  break ;\n  case 'E' : vto [ i ] . type = FORMAT_DOUBLE ;\n  flags |= FLAGS_FLOATE | FLAGS_UPPER ;\n  break ;\n  case 'g' : vto [ i ] . type = FORMAT_DOUBLE ;\n  flags |= FLAGS_FLOATG ;\n  break ;\n  case 'G' : vto [ i ] . type = FORMAT_DOUBLE ;\n  flags |= FLAGS_FLOATG | FLAGS_UPPER ;\n  break ;\n  default : vto [ i ] . type = FORMAT_UNKNOWN ;\n  break ;\n  }\n  vto [ i ] . flags = flags ;\n  vto [ i ] . width = width ;\n  vto [ i ] . precision = precision ;\n  if ( flags & FLAGS_WIDTHPARAM ) {\n  long k = width - 1 ;\n  vto [ i ] . width = k ;\n  vto [ k ] . type = FORMAT_WIDTH ;\n  vto [ k ] . flags = FLAGS_NEW ;\n  vto [ k ] . width = 0 ;\n  vto [ k ] . precision = 0 ;\n  }\n  if ( flags & FLAGS_PRECPARAM ) {\n  long k = precision - 1 ;\n  vto [ i ] . precision = k ;\n  vto [ k ] . type = FORMAT_WIDTH ;\n  vto [ k ] . flags = FLAGS_NEW ;\n  vto [ k ] . width = 0 ;\n  vto [ k ] . precision = 0 ;\n  }\n  * endpos ++ = fmt + 1 ;\n  }\n  }\n  for ( i = 0 ;\n  i < max_param ;\n  i ++ ) {\n  if ( vto [ i ] . flags & FLAGS_WIDTHPARAM ) {\n  vto [ vto [ i ] . width ] . data . num . as_signed = ( mp_intmax_t ) va_arg ( arglist , int ) ;\n  }\n  if ( vto [ i ] . flags & FLAGS_PRECPARAM ) {\n  vto [ vto [ i ] . precision ] . data . num . as_signed = ( mp_intmax_t ) va_arg ( arglist , int ) ;\n  }\n  switch ( vto [ i ] . type ) {\n  case FORMAT_STRING : vto [ i ] . data . str = va_arg ( arglist , char * ) ;\n  break ;\n  case FORMAT_INTPTR : case FORMAT_UNKNOWN : case FORMAT_PTR : vto [ i ] . data . ptr = va_arg ( arglist , void * ) ;\n  break ;\n  case FORMAT_INT : # ifdef HAVE_LONG_LONG_TYPE if ( ( vto [ i ] . flags & FLAGS_LONGLONG ) && ( vto [ i ] . flags & FLAGS_UNSIGNED ) ) vto [ i ] . data . num . as_unsigned = ( mp_uintmax_t ) va_arg ( arglist , mp_uintmax_t ) ;\n  else if ( vto [ i ] . flags & FLAGS_LONGLONG ) vto [ i ] . data . num . as_signed = ( mp_intmax_t ) va_arg ( arglist , mp_intmax_t ) ;\n  else # endif {\n  if ( ( vto [ i ] . flags & FLAGS_LONG ) && ( vto [ i ] . flags & FLAGS_UNSIGNED ) ) vto [ i ] . data . num . as_unsigned = ( mp_uintmax_t ) va_arg ( arglist , unsigned long ) ;\n  else if ( vto [ i ] . flags & FLAGS_LONG ) vto [ i ] . data . num . as_signed = ( mp_intmax_t ) va_arg ( arglist , long ) ;\n  else if ( vto [ i ] . flags & FLAGS_UNSIGNED ) vto [ i ] . data . num . as_unsigned = ( mp_uintmax_t ) va_arg ( arglist , unsigned int ) ;\n  else vto [ i ] . data . num . as_signed = ( mp_intmax_t ) va_arg ( arglist , int ) ;\n  }\n  break ;\n  case FORMAT_DOUBLE : vto [ i ] . data . dnum = va_arg ( arglist , double ) ;\n  break ;\n  case FORMAT_WIDTH : vto [ i ] . type = FORMAT_INT ;\n  break ;\n  default : break ;\n  }\n  }\n  return 0 ;\n  }", "tokenized": "static int ID ( const char * ID , ID * ID , char * * ID , ID ID ) { char * ID = ( char * ) ID ; int ID = 0 ; long ID ; long ID ; long ID ; int ID ; long ID = 0 ; long ID ; while ( * ID ) { if ( * ID ++ == LITERAL ) { if ( * ID == LITERAL ) { ID ++ ; continue ; } ID = ID ; ID ++ ; ID = ID ( ID , & ID ) ; if ( 0 == ID ) ID = ID ; if ( ID > ID ) ID = ID ; ID = 0 ; ID = 0 ; while ( ID ( ID ) ) { # if ID ( ID ) if ( ! ID ( ID , LITERAL , 3 ) ) { ID |= ID ; ID += 3 ; } else if ( ! ID ( ID , LITERAL , 3 ) ) { ID |= ID ; ID += 3 ; } else # ID switch ( * ID ++ ) { case LITERAL : ID |= ID ; break ; case LITERAL : ID |= ID ; break ; case LITERAL : ID |= ID ; ID &= ~ ID ; break ; case LITERAL : ID |= ID ; break ; case LITERAL : ID |= ID ; if ( LITERAL == * ID ) { ID |= ID ; ID ++ ; ID ++ ; ID = ID ( ID , & ID ) ; if ( ID ) ID = ID ; else ID = ID ; if ( ID > ID ) ID = ID ; } else { ID |= ID ; ID = ID ( ID , & ID , 1 0 ) ; } break ; case LITERAL : ID |= ID ; break ; # if ID ( ID ) case LITERAL : # if ( ID > ID ) ID |= ID ; # else ID |= ID ; # ID break ; # ID case LITERAL : if ( ID & ID ) ID |= ID ; else ID |= ID ; break ; case LITERAL : ID |= ID ; break ; case LITERAL : ID |= ID ; break ; case LITERAL : # if ( ID > ID ) ID |= ID ; # else ID |= ID ; # ID break ; case LITERAL : # if ( ID > ID ) ID |= ID ; # else ID |= ID ; # ID break ; case LITERAL : if ( ! ( ID & ID ) ) ID |= ID ; case LITERAL : case LITERAL : case LITERAL : case LITERAL : case LITERAL : case LITERAL : case LITERAL : case LITERAL : case LITERAL : ID |= ID ; ID = ID ( ID - 1 , & ID , 1 0 ) ; break ; case LITERAL : ID |= ID ; ID ++ ; ID = ID ( ID , & ID ) ; if ( ID ) ID = ID ; else ID = ID ; if ( ID > ID ) ID = ID ; break ; default : break ; } } ID = ID - 1 ; if ( ( ID < 0 ) || ( ID >= ID ) ) return 1 ; switch ( * ID ) { case LITERAL : ID |= ID ; case LITERAL : ID [ ID ] . ID = ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; break ; case LITERAL : case LITERAL : ID [ ID ] . ID = ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID | ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID | ID | ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID | ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID ; break ; case LITERAL : ID [ ID ] . ID = ID ; ID |= ID | ID ; break ; default : ID [ ID ] . ID = ID ; break ; } ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; if ( ID & ID ) { long ID = ID - 1 ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = 0 ; ID [ ID ] . ID = 0 ; } if ( ID & ID ) { long ID = ID - 1 ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = ID ; ID [ ID ] . ID = 0 ; ID [ ID ] . ID = 0 ; } * ID ++ = ID + 1 ; } }", "call_slices_vd": [], "call_slices_sy": [], "array_slices_vd": [[1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], [1, 2, 3, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 159, 161, 162, 164, 169, 170, 172, 173, 174, 175, 178, 180]], "array_slices_sy": [[1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182], [1, 2, 3, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182]], "arith_slices_vd": [[1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 53, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 89, 90, 91, 92, 102, 105, 108, 111, 114, 119, 122, 125, 128, 136, 137], [1, 2, 3, 10, 11, 12, 13, 17, 18, 19, 23, 24, 26, 28, 30, 32, 43, 45, 46, 77, 80, 89, 90], [1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 79, 80, 89, 90, 91, 92, 102, 105, 108, 111, 114, 119, 122, 125, 128, 144, 145], [1, 2, 3, 10, 11, 12, 13, 17, 18, 19, 23, 24, 26, 28, 30, 32, 43, 45, 46, 80, 89, 90, 152], [1, 2, 3, 10, 11, 12, 13, 17, 18, 19, 23, 24, 26, 28, 30, 32, 43, 45, 46, 80, 89, 90]], "arith_slices_sy": [[1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 53, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 150, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182], [1, 2, 3, 10, 11, 12, 13, 17, 18, 19, 23, 24, 26, 28, 30, 32, 43, 45, 46, 77, 80, 89, 90, 93, 95, 97, 99, 101, 104, 107, 110, 113, 116, 118, 121, 124, 127, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 150, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182], [1, 2, 3, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 57, 59, 60, 62, 63, 65, 67, 69, 70, 72, 73, 75, 76, 79, 80, 89, 90, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182], [1, 2, 3, 10, 11, 12, 13, 17, 18, 19, 23, 24, 26, 28, 30, 32, 43, 45, 46, 80, 89, 90, 152], [1, 2, 3, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 185]], "ptr_slices_vd": [], "ptr_slices_sy": [], "label": 0}, {"file_path": "../data/chrome_debian/raw_code/9_1.c", "code": "int jbig2_decode_generic_mmr ( Jbig2Ctx * ctx , Jbig2Segment * segment , const Jbig2GenericRegionParams * params , const byte * data , size_t size , Jbig2Image * image ) {\n  Jbig2MmrCtx mmr ;\n  const int rowstride = image -> stride ;\n  byte * dst = image -> data ;\n  byte * ref = NULL ;\n  int y ;\n  int code = 0 ;\n  jbig2_decode_mmr_init ( & mmr , image -> width , image -> height , data , size ) ;\n  for ( y = 0 ;\n  y < image -> height ;\n  y ++ ) {\n  memset ( dst , 0 , rowstride ) ;\n  code = jbig2_decode_mmr_line ( & mmr , ref , dst ) ;\n  if ( code < 0 ) return code ;\n  ref = dst ;\n  dst += rowstride ;\n  }\n  return code ;\n  }", "tokenized": "int ID ( ID * ID , ID * ID , const ID * ID , const ID * ID , ID ID , ID * ID ) { ID ID ; const int ID = ID -> ID ; ID * ID = ID -> ID ; ID * ID = ID ; int ID ; int ID = 0 ; ID ( & ID , ID -> ID , ID -> ID , ID , ID ) ; for ( ID = 0 ; ID < ID -> ID ; ID ++ ) { ID ( ID , 0 , ID ) ; ID = ID ( & ID , ID , ID ) ; if ( ID < 0 ) return ID ; ID = ID ; ID += ID ; } return ID ; }", "call_slices_vd": [[1, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16]], "call_slices_sy": [[1, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16]], "array_slices_vd": [], "array_slices_sy": [], "arith_slices_vd": [], "arith_slices_sy": [], "ptr_slices_vd": [[1, 8], [1, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16], [1, 3], [1, 4]], "ptr_slices_sy": [[1, 8], [1, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 18], [1, 3, 10, 11, 12, 13, 14, 15, 16, 18], [1, 4, 10, 11, 12, 13, 14, 15, 16, 18]], "label": 1}]